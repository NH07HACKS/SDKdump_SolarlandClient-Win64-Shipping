#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SolarGameInstance

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Solarland_structs.hpp"
#include "Solarland_classes.hpp"
#include "LLHSDK_structs.hpp"
#include "SolarFramework_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass SolarGameInstance.SolarGameInstance_C
// 0x0018 (0x0C38 - 0x0C20)
class USolarGameInstance_C final : public USolarGameInstanceBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0C20(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TMulticastInlineDelegate<void()>              OnBroadcastModeChanged;                            // 0x0C28(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void ExecuteUbergraph_SolarGameInstance(int32 EntryPoint);
	void SolarGM_TestEnsureMsgWithBP();
	void SolarGM_TestCrashWithBP();
	void LuaGetBroadcastHeroName(const class FString& SolarPlayerId, class FString* BroadcastPlayerName);
	void LuaGetBroadcastPlayerName(const class FString& SolarPlayerId, class FString* BroadcastPlayerName);
	void LuaOnBroadcastModeChanged();
	void SolarGM_LobbyLua(const class FString& CmdName, const TArray<class FString>& Params_0);
	void SolarGM_DelCharacterSkinLua(int32 SkinID);
	void InitLuaClasses();
	void SolarGM_TestCrashWithLua();
	void SelectHeroAndSkinForPSOGathring(int32 CharacterID, int32 SkinID);
	void ShutDownRTCSdk();
	void OnDisconnect();
	void LuaStartGameFrameWork();
	void AsyncDownLoadConfigFile(int64 TaskID, const class FString& URL);
	void SolarGM_TestEnsureMsgWithLua();
	void OnOtherNetworkFailureDisconnect();
	void SolarGM_AddItemLua(int32 ItemID, int32 Count);
	void SolarGM_AddWeaponExpLua(int32 weaponid, int32 Count);
	void OnScopeChanged(EScope InLastScope, EScope InCurScope);
	void SolarGM_SetRankScoreLua(int32 ModeGroupID, int32 Score);
	void ExecuteBackKeyLuaCall();
	void LuaGetBroadcastHeroNameCopy(const class FString& SolarPlayerId, class FString* BroadcastPlayerName);
	void ExecuteChangeAudioModeLuaCall(bool bTurnOn);
	void SolarGM_OfflineTrainingLua();
	void CheckSavedDirFiles(TArray<class FString>* Files);
	TArray<class FString> GetLobbyPreloadAssetsFromLua(ESolarStageAssetPlatformFlags InPlatformFlag);
	void SolarGM_DelWeaponSkinLua(int32 SkinID);
	void SolarGM_TransmitGMLua(const class FString& playerName, const TArray<class FString>& GmArray);
	void SolarGM_QuickMatchLua(int32 MapID, int32 RuleId);
	void ReceiveClientWasKicked(const class FString& KickReason);
	void ReportLoadingInfoToBI(TArray<class FString>* LoadingInfo, float LoadingTime, bool bIsFinished);
	void LuaGetBroadcastPlayerNameCopy(const class FString& SolarPlayerId, class FString* BroadcastPlayerName);
	void ShutDownPCSDK();
	void RegisterNetworkManager();
	void SolarGM_AddCharacterSkinLua(int32 SkinID);
	void HandleNetworkError(ENetworkFailure FailureType, bool bIsServer);
	void ShutDownLimSdk();
	TArray<class FString> GetGlobalPreloadAssetsFromLua();
	bool IsTrainingMode();
	void LuaInitGameFrameWork();
	void ReceiveShutdown();
	void SolarGM_AddWeaponSkinLua(int32 SkinID);

	void OnStageFlagLoadAssetsFinished(ESolarStageFlags InCurStageFlag) const;
	void OnStageFlagLoadAssetsStarted(ESolarStageFlags InCurStageFlag) const;
	void OnStageFlagChanged(ESolarStageFlags InCurStageFlag) const;
	void OnReportClientBattleEndTLog() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SolarGameInstance_C">();
	}
	static class USolarGameInstance_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarGameInstance_C>();
	}
};
static_assert(alignof(USolarGameInstance_C) == 0x000008, "Wrong alignment on USolarGameInstance_C");
static_assert(sizeof(USolarGameInstance_C) == 0x000C38, "Wrong size on USolarGameInstance_C");
static_assert(offsetof(USolarGameInstance_C, UberGraphFrame) == 0x000C20, "Member 'USolarGameInstance_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(USolarGameInstance_C, OnBroadcastModeChanged) == 0x000C28, "Member 'USolarGameInstance_C::OnBroadcastModeChanged' has a wrong offset!");

}

